plugins {
    id "us.kirchmeier.capsule" version "0.9.0"
}

apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'codenarc'
apply plugin: 'maven'

configurations {
    compile {
        description = 'compile classpath'
        transitive = true
    }
    runtime {
        extendsFrom compile
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.thehyve.nl/content/groups/public/' }
}

dependencies {
    final SPRING_VERSION = '4.0.5.RELEASE'
    final BATCH_VERSION = '3.0.1.RELEASE'
    final LOGBACK_VERSION = '1.0.13'
    final SLF4J_VERSION = '1.7.5'
    final GUAVA_VERSION = '18.0'
    final JUNIT_VERSION = '4.11'
    final GMOCK_VERSION = '0.8.3'
    final POSTGRESQL_VERSION = '9.3-1102-jdbc41'

    compile 'org.codehaus.groovy:groovy-all:2.3.6'

    compile group: 'org.springframework.batch', name: 'spring-batch-core', version: BATCH_VERSION

    compile group: 'org.springframework', name: 'spring-context', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-tx', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-jdbc', version: SPRING_VERSION
//	compile group: 'org.springframework', name: 'spring-orm', version: SPRING_VERSION
//	compile group: 'org.springframework', name: 'spring-oxm', version: SPRING_VERSION
    compile group: 'com.jolbox', name: 'bonecp-spring', version: '0.8.0.RELEASE'
    compile group: 'com.h2database', name: 'h2', version: '1.3.174'
    compile group: 'com.google.guava', name: 'guava', version: GUAVA_VERSION

//	logging spring cleaning - use slf4j instead of commons-logging	
    compile group: 'ch.qos.logback', name: 'logback-classic', version: LOGBACK_VERSION
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: SLF4J_VERSION

    runtime group: 'org.postgresql', name: 'postgresql', version: POSTGRESQL_VERSION

    testCompile group: 'org.springframework.batch', name: 'spring-batch-test', version: BATCH_VERSION
    testCompile group: 'org.springframework', name: 'spring-test', version: SPRING_VERSION
    testCompile group: 'junit', name: 'junit', version: JUNIT_VERSION
    testCompile group: 'org.gmock', name: 'gmock', version: GMOCK_VERSION

}

def mainClass = 'org.springframework.batch.core.launch.support.CommandLineJobRunner'

run {
    mainClassName = mainClass
}

task capsule(type: ThinCapsule) {
    description = 'Creates the capsule jar.'
    group = 'build'
    applicationClass mainClass
    reallyExecutable { trampoline() }
}

sourceSets {
    functionalTest {
        java {
            srcDir 'src/test-func/java'
        }
        groovy {
            srcDir 'src/test-func/groovy'
        }
        resources {
            srcDir 'src/test-func/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath += sourceSets.functionalTest.runtimeClasspath
    useJUnit()

    doFirst {
        setupTransmartData()
    }

    reports {
        html.destination = file("$reports.html.destination/functional")
        junitXml.destination = file("$reports.junitXml.destination/functional")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

task createPom << {
    pom {
        project {
            groupId 'org.transmartproject'
            artifactId 'transmart-batch'
            version '1.0-SNAPSHOT'

            inceptionYear '2014'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}

codenarc {
    configFile = new File("${project.projectDir.absolutePath}/gradle/codenarc/ruleset.groovy")

    // consumed by Jenkins Violations plugin
    reportFormat = 'xml'

    // don't let codenarc violations fail the build
    tasks.withType(CodeNarc).all { codeNarcTask ->
        codeNarcTask.ignoreFailures = true
    }
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        //html.destination "${buildDir}/jacocoHtml"
    }
}
